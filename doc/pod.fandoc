Overview [#overview]
********************
'afEfanExtra' is a library for creating reusable [Embedded Fantom (efan)]`http://repo.status302.com/doc/afEfan/#overview`
components. It pairs up Fantom classes and efan templates to encapsulate model / view behaviour.

'afEfanExtra' uses [afIoc]`http://repo.status302.com/doc/afIoc/#overview` and extends
[afEfan]`http://repo.status302.com/doc/afEfan/#overview` to generate html, json, emails and other text content.



Quick Start [#quickStart]
*************************
Overdue.efan:
pre>
Dear <%= userName %>,

It appears the following rented DVDs are overdue:

    <%= dvds.join(", ") %>

Please return them at your convenience.

<% app.renderSignOff("The Management") %>
<pre

Overdue.fan:
pre>
using afIoc
using afEfanExtra

@Component
const mixin Overdue {

  // use afIoc services!
  @Inject abstract DvdService? dvdService

  // access fields from the template
  abstract Str? userName

  // called before the component is rendered
  Void initialise(Str userName) {
    this.userName = userName
  }

  // methods may be called from the template
  Str[] dvds() {
    dvdService.findByName(userName)
  }
}
<pre

AppModule.fan:
pre>
using afIoc

@SubModule { modules=[EfanExtraModule#]}
class AppModule {

  static Void bind(ServiceBinder binder) {
    binder.bindImpl(DvdService#)
  }

  @Contribute { serviceType=EfanLibraries# }
  static Void contributeEfanLibraries(MappedConfig config) {

    // contribute all components in our pod as a library named 'app'
    config["app"] = AppModule#.pod
  }
}
<pre

Then to render a component:

  efanExtra.render(Overdue#, "Mr Smith")



Components
==========
An efan component consists of a Fantom 'const mixin' class and a corresponding efan template file.

Component classes must be annotated with the '@Component' facet. By default, the template file has the same name as the
component and must live in a pod resource dir.

All fields and methods of the mixin are directly accessible in the template. You can even use afIoc's '@Inject' facet to
inject services just as you would in a service class.

Rendering
=========
In efan you use the 'ctx' variable to pass state into the template. In efan components you use an 'initialise()' method.
efan components do not use the 'ctx' variable, instead you use an 'initialise()' method to pass custom state. The 'initialise'
method may then save state in fields to be used by the template.

A component may only have one 'initialise' method. It may take any number of parameters and must annotated with '@Initialse'.

Example:

Overdue.efan:

Setup / Rendering


To render a component, call


Creating 3rd Party sLibraries


Release Notes [#releaseNotes]
*****************************

v0.0.2 [#v0.0.2]
----------------
 - New: Preview Release

