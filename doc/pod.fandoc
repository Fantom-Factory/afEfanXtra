Overview [#overview]
********************
'afEfanExtra' is a library for creating managed libraries of reusable [Embedded Fantom (efan)]`http://repo.status302.com/doc/afEfan/#overview`
components. Influenced by Java's [Tapestry 5]`http://tapestry.apache.org/index.html`, it pairs up Fantom classes and efan templates
to encapsulate model / view behaviour.

'afEfanExtra' is very much in its infancy, with ideas still being fleshed out. It works great in a web / afBedSheet environment,
with URLs being automatically mapped to components (coming soon...!), but it is presented here context free.

'afEfanExtra' extends [afEfan]`http://repo.status302.com/doc/afEfan/#overview`, is powered by
[afIoc]`http://repo.status302.com/doc/afIoc/#overview` and works great with [afSlim]`http://repo.status302.com/browse/afSlim`.



Quick Start [#quickStart]
*************************
Overdue.efan:
pre>
Dear <%= userName %>,

It appears the following rented DVDs are overdue:

    <%= dvds.join(", ") %>

Please return them at your convenience.

<% app.renderSignOff("The Management") %>
<pre

Overdue.fan:
pre>
using afIoc
using afEfanExtra

@Component
const mixin Overdue {

  // use afIoc services!
  @Inject abstract DvdService? dvdService

  // access fields from the template
  abstract Str? userName

  // called before the component is rendered
  Void initialise(Str userName) {
    this.userName = userName
  }

  // methods may be called from the template
  Str[] dvds() {
    dvdService.findByName(userName)
  }
}
<pre

AppModule.fan:
pre>
using afIoc

@SubModule { modules=[EfanExtraModule#]}
class AppModule {

  static Void bind(ServiceBinder binder) {
    binder.bindImpl(DvdService#)
  }

  @Contribute { serviceType=EfanLibraries# }
  static Void contributeEfanLibraries(MappedConfig config) {

    // contribute all components in our pod as a library named 'app'
    config["app"] = AppModule#.pod
  }
}
<pre

Full example source code available on [BitBucket]`https://bitbucket.org/AlienFactory/afefanextra/src/default/test/example/`.

Then to render a component:

  efanExtra.render(Overdue#, "Mr Smith")



Components [#components]
************************
An efan component consists of a Fantom 'const mixin' class and a corresponding efan template file.

Component classes must be annotated with the '@Component' facet. By default, the template file has the same name as the
component and lives in a pod resource dir.

All fields and methods of the mixin are directly accessible in the template. You can even use afIoc's '@Inject' facet to
inject services just as you would in a service class.

Use an 'initialise()' method to pass state into an efan component (the 'ctx' variable is not used). Only one 'initialise()'
is allowed. It must be named 'initialise' but may take any number of parameters.

Libraries [#libraries]
**********************
Components are managed in libraries. To package up your components, add to the following to your app module:

  @Contribute { serviceType=EfanLibraries# }
  static Void contributeEfanLibraries(MappedConfig config) {

    // contribute all components in the pod as a library named 'app'
    config["app"] = AppModule#.pod
  }

Library classes are automatically added as fields in your components. Library classes contain component render methods.
In the example above, the library 'app' has 2 render methods, available to your templates:

   app.renderOverdue(Str userName)
   app.renderSignOff(Str who)

> **ALIEN-AID:** Library render methods are logged at registry startup so you don't have to remember them!



Release Notes [#releaseNotes]
*****************************

v0.0.2 [#v0.0.2]
----------------
 - New: Preview Release

